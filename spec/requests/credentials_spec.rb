require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# RSpec.describe "/credentials", type: :request do
RSpec.describe "credential management", type: :request do

  it "creates a credential and redirects to the credential's page" do
    get "/credentials/new"
    expect(response).to render_template(:new)

    post "/credentials", :params => { :credential => {:name => "My credential"} }

    expect(response).to redirect_to(assigns(:credential))
    follow_redirect!

    expect(response).to render_template(:show)
    expect(response.body).to include("credential was successfully created.")
  end

  it "does not render a different template" do
    get "/credentials/new"
    expect(response).to_not render_template(:show)
  end
end
  
  # This should return the minimal set of attributes required to create a valid
  # Credential. As you add validations to Credential, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      Credential.create! valid_attributes
      get credentials_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      credential = Credential.create! valid_attributes
      get credential_url(credential)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_credential_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      credential = Credential.create! valid_attributes
      get edit_credential_url(credential)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Credential" do
        expect {
          post credentials_url, params: { credential: valid_attributes }
        }.to change(Credential, :count).by(1)
      end

      it "redirects to the created credential" do
        post credentials_url, params: { credential: valid_attributes }
        expect(response).to redirect_to(credential_url(Credential.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Credential" do
        expect {
          post credentials_url, params: { credential: invalid_attributes }
        }.to change(Credential, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post credentials_url, params: { credential: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested credential" do
        credential = Credential.create! valid_attributes
        patch credential_url(credential), params: { credential: new_attributes }
        credential.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the credential" do
        credential = Credential.create! valid_attributes
        patch credential_url(credential), params: { credential: new_attributes }
        credential.reload
        expect(response).to redirect_to(credential_url(credential))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        credential = Credential.create! valid_attributes
        patch credential_url(credential), params: { credential: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested credential" do
      credential = Credential.create! valid_attributes
      expect {
        delete credential_url(credential)
      }.to change(Credential, :count).by(-1)
    end

    it "redirects to the credentials list" do
      credential = Credential.create! valid_attributes
      delete credential_url(credential)
      expect(response).to redirect_to(credentials_url)
    end
  end
end
